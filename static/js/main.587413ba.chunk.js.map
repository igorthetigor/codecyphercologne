{"version":3,"sources":["Components/3cLogo.png","Components/stuff/globalFont.jsx","Components/navigation/navBar.jsx","Components/header.jsx","Components/contentBody.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","BeonStyle","createGlobalStyle","whoWeAre","console","log","verticalDivider","Navigation","Navbar","bg","variant","Brand","href","target","Nav","className","Link","onClick","style","marginLeft","imgStyle","position","top","left","transform","height","width","padding","borderRadius","cursor","Title","styled","h1","initView","document","getElementById","Header","Container","fluid","Row","Col","Image","src","logo","scrollIntoView","Testing","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,oC,kYCIpC,IAAMC,EAAYC,YAAH,IAElB,I,gBCHJ,SAASC,IACPC,QAAQC,IAAI,4BAGd,IAAMC,EAAkB,CACtB,WAAc,kBACd,QAAW,SAGE,SAASC,IAEtB,OACE,oCACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,sDAAsDC,OAAO,UAAhF,gBACA,kBAACC,EAAA,EAAD,CAAKC,UAAU,iBACb,kBAACD,EAAA,EAAIE,KAAL,CAAUC,QAASd,GAAnB,eACA,yBAAKe,MAAQZ,IACb,kBAACQ,EAAA,EAAIE,KAAL,CAAUC,QAASd,GAAnB,+BACA,yBAAKe,MAAQZ,IACb,kBAACQ,EAAA,EAAIE,KAAL,CAAUC,QAASd,GAAnB,aACA,yBAAKe,MAAQZ,IACb,kBAACQ,EAAA,EAAIE,KAAL,CAAUC,QAASd,GAAnB,WACA,kBAACW,EAAA,EAAIE,KAAL,CAAUC,QAASd,EAAUe,MAAO,CAACC,WAAW,SAAhD,gB,gICdV,IAAMC,EAAW,CACfC,SAAU,WACVC,IAAK,MACLC,KAAM,MACNC,UAAW,wBACXC,OAAQ,OACRC,MAAO,OACPC,QAAS,WACTC,aAAc,OACdC,OAAQ,WAGJC,EAAQC,IAAOC,GAAV,KAILC,EAAWC,SAASC,eAAe,QAE1B,SAASC,IAGtB,OACE,4BAAQlB,MAAO,CAAEG,SAAU,SAAUC,IAAK,MACxC,kBAACe,EAAA,EAAD,CAAWC,OAAK,EAACvB,UAAU,cACzB,kBAACd,EAAD,MACA,kBAACsC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACV,EAAD,YAEE,6BAFF,SAIE,6BAJF,YAQF,kBAACU,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,IAAG,UAAKC,KACRL,OAAK,EACLpB,MAAOE,EACPH,QAAS,WACPgB,EAASW,gBAAe,SAMlC,kBAACrC,EAAD,OCzDS,SAASsC,IACtB,OACE,kCACI,6BADJ,KACY,6BADZ,KACoB,6BADpB,KAC4B,6BAD5B,KACoC,6BADpC,KAC4C,6BAD5C,KACoD,6BADpD,KAC4D,6BAD5D,KACoE,6BADpE,KAC4E,6BAD5E,KACoF,6BADpF,KAC4F,6BAD5F,KACoG,6BADpG,KAC4G,6BAD5G,KACoH,6BADpH,KAC4H,6BAD5H,KACoI,6BADpI,KAC4I,6BAD5I,KACoJ,6BADpJ,KAC4J,6BAD5J,KACoK,6BADpK,KAC4K,6BAD5K,KACoL,6BADpL,KAC4L,6BAD5L,KACoM,6BADpM,KAC4M,6BAD5M,KACoN,6BADpN,KAC4N,6BAD5N,KACoO,6BADpO,KAC4O,6BAD5O,KACoP,6BADpP,KAC4P,6BAD5P,KACoQ,6BADpQ,KAC4Q,6BAD5Q,KACoR,6BADpR,KAC4R,6BAD5R,KACoS,6BADpS,KAC4S,6BAD5S,KACoT,6BADpT,KAC4T,6BAD5T,KACoU,6BADpU,KAC4U,6BAD5U,KACoV,6BADpV,KAC4V,6BAD5V,KACoW,6BADpW,KAC4W,6BAD5W,KACoX,6BADpX,KAC4X,6BAD5X,KACoY,6BADpY,KAC4Y,6BAD5Y,KACoZ,6BADpZ,KAC4Z,6BAD5Z,KACoa,6BADpa,KAC4a,6BAD5a,KACob,6BADpb,KAC4b,6BAD5b,KACoc,6BADpc,KAC4c,6BAD5c,KACod,6BADpd,KAC4d,6BAD5d,KACoe,6BADpe,KAC4e,6BAD5e,KACof,6BADpf,KAC4f,8BCYjfC,MATf,WACE,OACE,yBAAK/B,UAAU,OACb,kBAACqB,EAAD,MACA,kBAACS,EAAD,QCAcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpB,SAASC,eAAe,W","file":"static/js/main.587413ba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/3cLogo.4192f778.png\";","// import font from './Beon.otf';\nimport '../../beon/stylesheet.css';\nimport { createGlobalStyle } from 'styled-components';\n\nexport const BeonStyle = createGlobalStyle`\n\n  ${'' /* @font-face {\n    font-family: 'Notable';\n    src: url(https://fonts.gstatic.com/s/notable/v4/gNMEW3N_SIqx-WX9yHQiFQ.woff2) format('woff2');\n  }; */}\n\n  h1 {    \n    font-family: 'BeonMedium';\n    color: white;\n  };\n\n`;\n\n// console.log(font);","import React from 'react';\nimport { Navbar, Nav } from 'react-bootstrap';\n\nfunction whoWeAre() {\n  console.log('we are gayyyyyyyyyyyyyyy');\n}\n\nconst verticalDivider = {\n  'borderLeft': '6px solid white',\n  'display': '100px', \n}\n\nexport default function Navigation() {\n\n  return (\n    <>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"https://duckduckgo.com/?q=learn+to+code&t=lm&ia=web\" target=\"_blank\">coden lernen</Navbar.Brand>\n        <Nav className=\"d-inline-flex\">\n          <Nav.Link onClick={whoWeAre}>Ãœber uns</Nav.Link>\n          <div style= {verticalDivider}></div>\n          <Nav.Link onClick={whoWeAre}>code cypher cologne Projekt</Nav.Link>\n          <div style= {verticalDivider}></div>\n          <Nav.Link onClick={whoWeAre}>Anmeldung</Nav.Link>\n          <div style= {verticalDivider}></div>\n          <Nav.Link onClick={whoWeAre}>Kontakt</Nav.Link>\n          <Nav.Link onClick={whoWeAre} style={{marginLeft:'40px',}} >Impressum</Nav.Link>\n        </Nav>        \n      </Navbar>\n    </>\n  );\n}","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport logo from './3cLogo.png';\nimport { BeonStyle } from './stuff/globalFont';\nimport Navigation from './navigation/navBar';\n\n//BOOTIESTRAP Components\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Image from 'react-bootstrap/Image';\n\nconst imgStyle = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  height: '10vh',\n  width: 'auto',\n  padding: '10px 0px',\n  borderRadius: '35px',\n  cursor: 'pointer',\n};\n\nconst Title = styled.h1`\n  text-align: left;\n`;\n\nconst initView = document.getElementById('root');\n\nexport default function Header() {\n  // const [initView, setInitView] = useState(document.getElementById('root'));\n\n  return (\n    <header style={{ position: 'sticky', top: '0' }}>\n      <Container fluid className='bg-primary'>\n        <BeonStyle />\n        <Row>\n          <Col>\n            <Title>\n              CODE\n              <br />\n              CYPHER\n              <br />\n              COLOGNE\n            </Title>\n          </Col>\n          <Col>\n            <Image\n              src={`${logo}`}\n              fluid\n              style={imgStyle}\n              onClick={() => {\n                initView.scrollIntoView(true);\n              }}\n            />\n          </Col>\n        </Row>\n      </Container>\n      <Navigation />\n    </header>\n  );\n}\n","import React from 'react';\n\nexport default function Testing() {\n  return (\n    <div>\n      | <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />| <br />\n    </div>\n  )\n}","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// Los Components\nimport Header from './Components/header';\nimport Testing from './Components/contentBody';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Testing />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}